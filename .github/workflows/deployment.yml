name: Publish Docker Image

on:
  workflow_run:
    workflows: [db]
    types:
      - completed

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.REGION }}

jobs:
  on-success:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Check out
        uses: actions/checkout@v2
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}
        
      - name: 'Create env file'
        run: |
          touch .env
          echo DOCKER_REGISTRY=${{ secrets.ACCOUNTID}}.dkr.ecr.${{ secrets.REGION }}.amazonaws.com >> .env
          cat .env
          
      - name: Push to ECR
        id: tag
        run: |
          aws ecr get-login-password --region ${region}  | docker login --username AWS --password-stdin ${accountid}.dkr.ecr.${region}.amazonaws.com
          docker-compose build
          docker-compose push    

        env:
          accountid: ${{ secrets.ACCOUNTID}}
          region: ${{ secrets.REGION }}
          ecr_repository: ${{ secrets.ECR_REPOSITORY }}

      - name: Deploy to ECS
        run: |
          docker context create ecs psi-ecs
          docker compose use psi-ecs
          docker compose up
        
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
  
  on-failure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    steps:
      - run: echo 'The triggering workflow failed'