name: db

on:
  workflow_run:
    workflows: [backend]
    types:
      - completed


jobs:
  on-success:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Check out
        uses: actions/checkout@v2
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: | 
          cd db && cd infrastructure
          terraform init -input=false -backend-config="bucket=psi-docker-repo" -backend-config="key=db/terraform.tfstate"

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Validate
        run: |
          cd db && cd infrastructure
          terraform validate 

      # Generates an execution plan for Terraform
      - name: Terraform Plan & Apply
        run: | 
          cd db && cd infrastructure
          terraform plan -var repository_name=${{ secrets.ECR_DB_REPOSITORY }} -out=tfplan
          terraform apply -input=false -auto-approve tfplan
  on-failure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    steps:
      - run: echo 'The triggering workflow failed'
